Assertion 

Melakukan pengecekan di unit test secara manual menggunakan if else sangatlah menyebalkan 
apalagi jika result data yang haris di cek itu banyak
oleh karena itu sangatlah disarankan untuk menggunakan Assertion untuk melakukan pengecekan
Sayangnya, Golang tidak menyediakan package untuk assertion, sehingga kita butuh menambahkan 
library untuk melakukan assertion ini.

Assertion tetap memanggil fail bukan failnow

https://github.com/stretchr/testify

Assert vs Require
- Testify menyediakan dua package untuk assertion, yaitu assert dan Require
saat kita menggunakan assert, jika pengecekan gagal, maka akan memanggil Fail(), artinya eksekusi unit test akan tetapi dilanjutkan
Sedangkan jika kita menggunakan require, jika pengecekan gagal, maka require akan memanggil FailNow(),
yang artinya eksekusu unit test tidak akan dilanjutkan

Skip Test
- Membatalkan eksekusi unit test
Contohnya : saat function tersebut hanya bisa di jalankan di windows tetapi device yang dipakai itu mac


TestMain
Biasanya dalam unit test, kadang kita ingin melakukan sesuau sebelum dan seelah sebiuah unit test dieksekusi
jikalau kode yang kita lakikan sebelum dan ssudah selalu sama antar uni test function, maka membuat manual
di unit test functuon nya adalah hal yang membosankan dan terlalu banyak kode duplikat jadinya
untungnya di golang terdapat fitur yang bernama testing M
Fitur ini bernama Main, dimana digunakan untuk mengatur eksekusi unit test, namun hal ini juga bisa kita
gunakan untuk melakukan before dan after unit test

untuk mengatur eksekusi unit test kita cukup membuat sebuah function bernama TestMain dengan parameter testing M
jika terdapa function TestMain tersebut, maka secara otomatis golang akan mengeksekusi function ini tiap kali akan
menjalankan unit test di sebuah package
dengan ini kita bisa mengatur before dan after unit test seusai dengan yang kita mau
ingat, function Testmain itu dieksekusi hanya sekali perfunction pergolang pacakge, bukan tiap function unit test

Sub Test
Golang mendukung fitur pembuatan fucntion unit test di dalam fuctuon unit testfitur ini memang sedikit aneh dan
jarang sekali dimilikidi unit test d bahasa pemograman yang lainnya
untuk membuat sub test kita menggunakan functuin Run()


Table Test
Sebelumnya kita sudah belajar tentang sub test
Jika diperhatikan, sebenarnya dengan sub test, kita bisa membuat test secara dinamis
dan fitur subtest ini, biasanya digunakan oleh programmer golang untuk membuat test dengan konsep table test 
table test yaitu dimana kita menyediakan data berupa slice yang berisi parameter dan ekspetasi hasil dari unit test
lalu slice tersebut kita iterasi menggunakan sub test